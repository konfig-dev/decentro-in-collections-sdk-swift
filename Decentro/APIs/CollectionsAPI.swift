//
// CollectionsAPI.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class CollectionsAPI {

    /**
     Generate payment link
     
     - parameter generatePaymentLinkRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func generatePaymentLink(generatePaymentLinkRequest: GeneratePaymentLinkRequest, apiResponseQueue: DispatchQueue = DecentroAPI.apiResponseQueue, completion: @escaping ((_ data: GeneratePaymentLinkResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return generatePaymentLinkWithRequestBuilder(generatePaymentLinkRequest: generatePaymentLinkRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Generate payment link
     - POST /v2/payments/upi/link
     - API Key:
       - type: apiKey client_id 
       - name: client_id
     - API Key:
       - type: apiKey client_secret 
       - name: client_secret
     - API Key:
       - type: apiKey module_secret 
       - name: module_secret
     - API Key:
       - type: apiKey provider_secret 
       - name: provider_secret
     - parameter generatePaymentLinkRequest: (body)  
     - returns: RequestBuilder<GeneratePaymentLinkResponse> 
     */
    open class func generatePaymentLinkWithRequestBuilder(generatePaymentLinkRequest: GeneratePaymentLinkRequest) -> RequestBuilder<GeneratePaymentLinkResponse> {
        let localVariablePath = "/v2/payments/upi/link"
        let localVariableURLString = DecentroAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: generatePaymentLinkRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GeneratePaymentLinkResponse>.Type = DecentroAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get transaction status
     
     - parameter transactionId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getTransactionStatus(transactionId: String, apiResponseQueue: DispatchQueue = DecentroAPI.apiResponseQueue, completion: @escaping ((_ data: GetTransactionStatusResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return getTransactionStatusWithRequestBuilder(transactionId: transactionId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get transaction status
     - GET /v2/payments/transaction/{transaction_id}/status
     - API Key:
       - type: apiKey client_id 
       - name: client_id
     - API Key:
       - type: apiKey client_secret 
       - name: client_secret
     - API Key:
       - type: apiKey module_secret 
       - name: module_secret
     - API Key:
       - type: apiKey provider_secret 
       - name: provider_secret
     - parameter transactionId: (path)  
     - returns: RequestBuilder<GetTransactionStatusResponse> 
     */
    open class func getTransactionStatusWithRequestBuilder(transactionId: String) -> RequestBuilder<GetTransactionStatusResponse> {
        var localVariablePath = "/v2/payments/transaction/{transaction_id}/status"
        let transactionIdPreEscape = "\(APIHelper.mapValueToPathItem(transactionId))"
        let transactionIdPostEscape = transactionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{transaction_id}", with: transactionIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = DecentroAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetTransactionStatusResponse>.Type = DecentroAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Issue collect request
     
     - parameter issueCollectRequestRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func issueCollectRequest(issueCollectRequestRequest: IssueCollectRequestRequest, apiResponseQueue: DispatchQueue = DecentroAPI.apiResponseQueue, completion: @escaping ((_ data: IssueCollectRequestResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return issueCollectRequestWithRequestBuilder(issueCollectRequestRequest: issueCollectRequestRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Issue collect request
     - POST /v2/payments/collection
     - API Key:
       - type: apiKey client_id 
       - name: client_id
     - API Key:
       - type: apiKey client_secret 
       - name: client_secret
     - API Key:
       - type: apiKey module_secret 
       - name: module_secret
     - API Key:
       - type: apiKey provider_secret 
       - name: provider_secret
     - parameter issueCollectRequestRequest: (body)  
     - returns: RequestBuilder<IssueCollectRequestResponse> 
     */
    open class func issueCollectRequestWithRequestBuilder(issueCollectRequestRequest: IssueCollectRequestRequest) -> RequestBuilder<IssueCollectRequestResponse> {
        let localVariablePath = "/v2/payments/collection"
        let localVariableURLString = DecentroAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: issueCollectRequestRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<IssueCollectRequestResponse>.Type = DecentroAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Issue UPI Refund
     
     - parameter issueUpiRefundRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func issueUpiRefund(issueUpiRefundRequest: IssueUpiRefundRequest, apiResponseQueue: DispatchQueue = DecentroAPI.apiResponseQueue, completion: @escaping ((_ data: IssueUpiRefundResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return issueUpiRefundWithRequestBuilder(issueUpiRefundRequest: issueUpiRefundRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Issue UPI Refund
     - POST /v2/payments/upi/refund
     - API Key:
       - type: apiKey client_id 
       - name: client_id
     - API Key:
       - type: apiKey client_secret 
       - name: client_secret
     - API Key:
       - type: apiKey module_secret 
       - name: module_secret
     - API Key:
       - type: apiKey provider_secret 
       - name: provider_secret
     - parameter issueUpiRefundRequest: (body)  
     - returns: RequestBuilder<IssueUpiRefundResponse> 
     */
    open class func issueUpiRefundWithRequestBuilder(issueUpiRefundRequest: IssueUpiRefundRequest) -> RequestBuilder<IssueUpiRefundResponse> {
        let localVariablePath = "/v2/payments/upi/refund"
        let localVariableURLString = DecentroAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: issueUpiRefundRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<IssueUpiRefundResponse>.Type = DecentroAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Validate UPI handle
     
     - parameter validateUpiHandleRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func validateUpiHandle(validateUpiHandleRequest: ValidateUpiHandleRequest, apiResponseQueue: DispatchQueue = DecentroAPI.apiResponseQueue, completion: @escaping ((_ data: ValidateUpiHandleResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return validateUpiHandleWithRequestBuilder(validateUpiHandleRequest: validateUpiHandleRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Validate UPI handle
     - POST /v2/payments/vpa/validate
     - API Key:
       - type: apiKey client_id 
       - name: client_id
     - API Key:
       - type: apiKey client_secret 
       - name: client_secret
     - API Key:
       - type: apiKey module_secret 
       - name: module_secret
     - API Key:
       - type: apiKey provider_secret 
       - name: provider_secret
     - parameter validateUpiHandleRequest: (body)  
     - returns: RequestBuilder<ValidateUpiHandleResponse> 
     */
    open class func validateUpiHandleWithRequestBuilder(validateUpiHandleRequest: ValidateUpiHandleRequest) -> RequestBuilder<ValidateUpiHandleResponse> {
        let localVariablePath = "/v2/payments/vpa/validate"
        let localVariableURLString = DecentroAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: validateUpiHandleRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ValidateUpiHandleResponse>.Type = DecentroAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
