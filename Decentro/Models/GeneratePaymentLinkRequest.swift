//
// GeneratePaymentLinkRequest.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct GeneratePaymentLinkRequest: Codable, JSONEncodable, Hashable {

    public var referenceId: String
    public var payeeAccount: String
    public var amount: Double
    public var purposeMessage: String
    public var generateQr: Int
    public var expiryTime: Int?
    public var customizedQrWithLogo: Int?
    public var generateUri: Int?

    public init(referenceId: String, payeeAccount: String, amount: Double, purposeMessage: String, generateQr: Int, expiryTime: Int? = nil, customizedQrWithLogo: Int? = nil, generateUri: Int? = nil) {
        self.referenceId = referenceId
        self.payeeAccount = payeeAccount
        self.amount = amount
        self.purposeMessage = purposeMessage
        self.generateQr = generateQr
        self.expiryTime = expiryTime
        self.customizedQrWithLogo = customizedQrWithLogo
        self.generateUri = generateUri
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case referenceId = "reference_id"
        case payeeAccount = "payee_account"
        case amount
        case purposeMessage = "purpose_message"
        case generateQr = "generate_qr"
        case expiryTime = "expiry_time"
        case customizedQrWithLogo = "customized_qr_with_logo"
        case generateUri = "generate_uri"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(referenceId, forKey: .referenceId)
        try container.encode(payeeAccount, forKey: .payeeAccount)
        try container.encode(amount, forKey: .amount)
        try container.encode(purposeMessage, forKey: .purposeMessage)
        try container.encode(generateQr, forKey: .generateQr)
        try container.encodeIfPresent(expiryTime, forKey: .expiryTime)
        try container.encodeIfPresent(customizedQrWithLogo, forKey: .customizedQrWithLogo)
        try container.encodeIfPresent(generateUri, forKey: .generateUri)
    }
}

