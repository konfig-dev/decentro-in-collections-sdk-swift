//
// GeneratePaymentLinkResponseData.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct GeneratePaymentLinkResponseData: Codable, JSONEncodable, Hashable {

    public var generatedLink: String?
    public var transactionId: String?
    public var transactionStatus: String?
    public var encodedDynamicQrCode: String?
    public var upiUri: String?
    public var pspUri: GeneratePaymentLinkResponseDataPspUri?

    public init(generatedLink: String? = nil, transactionId: String? = nil, transactionStatus: String? = nil, encodedDynamicQrCode: String? = nil, upiUri: String? = nil, pspUri: GeneratePaymentLinkResponseDataPspUri? = nil) {
        self.generatedLink = generatedLink
        self.transactionId = transactionId
        self.transactionStatus = transactionStatus
        self.encodedDynamicQrCode = encodedDynamicQrCode
        self.upiUri = upiUri
        self.pspUri = pspUri
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case generatedLink
        case transactionId
        case transactionStatus
        case encodedDynamicQrCode
        case upiUri
        case pspUri
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(generatedLink, forKey: .generatedLink)
        try container.encodeIfPresent(transactionId, forKey: .transactionId)
        try container.encodeIfPresent(transactionStatus, forKey: .transactionStatus)
        try container.encodeIfPresent(encodedDynamicQrCode, forKey: .encodedDynamicQrCode)
        try container.encodeIfPresent(upiUri, forKey: .upiUri)
        try container.encodeIfPresent(pspUri, forKey: .pspUri)
    }
}

